
2020.12.12
#第1回
わからないことがあれば基本的に鈴木駿輔さんに聞けばいいかも


「49期生のメンバー」クセが強いメンバーがそろってそう
利根川さん（そうたさん）
神奈川
就職活動の傍ら、仕事にも必要になるので
はまってることはエナジードリンクの飲み比べ、モンスターの白いのが好き


福田さん（なおやさん）
栃木
スキルを付けていかせるしごとしたい
ゲームとアニメすき　スマブラと音ゲーやってます、ぷよぷよ

ドゥトゥアンダットさん（だっと）
埼玉県
就活で使いたい
筋トレが好き、マッチョ目指してる
高校の時はバスケ部　陽キャ

中西さん（一喜さん）
広島出身
高校卒業から工場で働いてて
モンスターエナジー箱で買ってる、サウナにはまってる

西野さん（広大さん）
大阪
大学生だけど、暇なのでプログラミング始めてみようかなと（稼ぎたい）


以下オリエン

ジュニアエンジニアになってからいろいろ考えてもいいかも
実務経験をもつことでそうなってほしい（在校中に）

★時給
クラウドソーシング　？～1000円
インターンアルバイト　1500　2000円
ジュニア　2500～3000円
シニアエンジニア　3000～4000円
CTO　VP of Engineering 5000～10000円

★市場価値の高いエンジニア
▼ハードスキル
技術が高い人
プログラミング言語
フレームワーク
サーバーの知識
ネットワークの仕組み

▼ソフトスキル
コミュニケーション力
リーダーシップ
マネジメントスキル
コーチングスキル

とりあえずソフトスキルはコミュニケーション力をつけてく方針

★マインドセット
自走力を持っているかどうか
困ったときに自分で調べ、答えを見つけ、実践できる能力

仮説を立て検証する
↓
調べる
↓
質問する

JSエンジニア養成講座が終わったら追加のコンテンツを学んだほうがいいよ

基礎パートはみっちりやりましょう

★CodeVillageラウンジ
技術的な問題を解決し学習をスムーズに進められるための質問フォーム
講義の質問
課題の提出
個別メンタリング応募

エンジニアには自己解決能力が求められる
質問をするときは答えよりも解決の仕方、ヒントを教えてもらう

質問するときの注意点
抽象的な質問はしない｛CSSがだめで色が変わらないみたいな
具体的にどういうパターンで何が再現できないのかを
卒業後はTeratailやStackOverFlowといった質問サイトを使う

★課題添削の注意点
▼添削は重要ではない
プログラムはまず動かせればOK
簡単に書ける方法もあるが学習を通じて改善していくのがベター
▼具体的に質問する
コードレビューは大切だが、聞きたいところを具体的に質問したほうが得られるものが多いよ

★個別メンタリング
キャリア相談
ラウンジでは解決できない質問


★聞きたい質問
理想的なJS学習ペース
・DOMまでを1か月
・Reactまでをもう1か月
・最後1か月
予習で進めておく
予習したもの自分でアプリを作っておくのもあり

案件について
CodeVillage側はアドバイスのみ
基本的には自分で案件を取りに行く
誰かの紹介で仕事をもらうパターンが多い

★そのほかのツールについて
Slack
・もくもく会
黙黙会→プログラムの勉強を黙々とやる会
みんなでやったほうがモチベ保てるよねってやつ

公式もくもく会→講師がいるので学習スピードあげられる
非公式もくもく会→講師がいないけど生徒同士の交流ができる



#プログラミング基礎
プログラミングの思考だったりプログラミングの記法とかを紹介

##そもそもコンピュータ・プログラムとは？
長所：プログラムに書いてあることをミスせず実行できる
短所：曖昧な指示を理解できない
→コンピュータが理解できるように超具体的にプログラムを書く

##プログラムを作成する6つのステップ
・テーマを決める（どんなものが作りたい
・あらすじを作る（どういう流れで
・シナリオを作る（フローチャート
・プログラミング言語に翻訳
・動かしてみる
・確認する

テーマを決める
あらすじを作る
シナリオを作る
この三つができない人が多いっす

###テーマを決める
漠然としたイメージを具体的にすること
例：カレーを作る
・どんなカレーを作るか
・何人分作るのか
・ルーを使うか、スパイスを集めるか
・甘口か中辛、辛口か

何を作るかを超明確にする
企画内容と仕様をはっきり

###あらすじを作る
完成までのフローをざっくり作る

####フローチャート
スタート
↓
買う材料を調べる
↓
買い物に行く
↓
料理する
↓
食べる
↓
後片付け
↓
終了

プログラミングは上から処理されるので正確な順番で記述する


###シナリオを作る
コンピューターの性格を理解したうえで超具体的にシナリオを書くこと
これ以上ねぇよってくらい細かく噛み砕いて記述する

料理するを細分化すると
牛肉を切る→玉ねぎを切るみたいになる
もっと細かく書くと
牛肉パックを用意→パックを開ける→牛肉をnセンチに切る
もっと細かく書けるが簡単にいうとこういうこと


##今週の課題
別途資料を送ります！あらすじやフローを考えてください

##質問
###いい会社に入るにはどの程度のレベルが必要なの？
JS養成講座をまず網羅できている状態


###UI,UX寄りのエンジニアって？
今のウェブページはアプリ寄りの動くデザインが多い
Reactのようなみためを管理する言語に造詣の深いWebデザイナーみたいなイメージ

###鈴木さんはどうやってエンジニアになったの
独学、親戚からサイトを作らせてもらってそこからって感じで

###ウェブサイトとウェブアプリの違い
ウェブサイトは見るだけ、ウェブアプリはインタラクティブな要素がある
Amazonのような何かを買ったりできるサイトのことを指す



2020.12.19
#第2回
今回の講義は別府さん
別府さんは事前学習動画の人っぽい
別府さんの授業ではZoomの機能の挙手をよく使うとのこと
Zoom＞参加者から使える機能っぽい

HTML、CSSをざっとおさらいしてアニメーションをやる

いろんなエディタがあって
有料だとcollabeditとかそういうのもあるので調べておくといいかも

JavaScriptは基本的には計算しかできないけど、ほかの言語と組み合わせることで絶大なパフォーマンスを発揮する
なのでHTMLとCSSの知見はしっかりと持っておいたほうがあとあと役に立つので、しっかり勉強しとこう

演習ー

今後、共同で開発とかやることになると時間的な制約が入ってくるので
時間のあるうちによいコードがかけるようにマークアップ言語や学んでいる言語、コンピュータサイエンスに関してしっかり勉強しておくといいかなと思います

##MDNのWebの仕組み解説
https://developer.mozilla.org/ja/docs/Learn/Getting_started_with_the_web/How_the_Web_works

サーバーとクライアントの関係
開発側＝サーバー
使用者（閲覧者）＝クライアント
ウェブページはクライアントの入力を受け取って
サーバーから情報を返して表示してます


##HTML＆CSSの自学の方法
情報源から遠い（解説をさらに別のメディアが解説してるみたいな）ものからとるよりも、より情報源から近い
信頼のおける情報源から学ぶといい（MDNなど）
プロパティについてはドキュメントを確認しながら触って挙動を実際に見てみるを無限に繰り返すしかないっぽいけど
気になるサイトがあったらコードを見ないで模写してみるってのも時間あるうちにやっとくといいと思う

###学習するときに気にしたいこと
コードの書き方によってはブラウザにかかる負荷などユーザーストレスの原因となることもあるため
より適切なコードがかけるように心がけること
ここらへんを気にするためにも、ちゃんとHTML/CSSの仕様だったりブラウザの仕様だったりをキャッチアップしといたほうがいいよって話

###ショートハンドプロパティとは（一括指定プロパティ）
CSSのプロパティにはまとめて記述するための「ショートハンド」という書き方が用意されています。
複数のプロパティを一括指定することが可能です。
制作のスピードがグッと早くなるので、プロの制作現場ではショートハンドでの記述は必須テクニックです。

ショートハンドプロパティはどのプロパティを指定するかがプロパティごとに設定されているのでよく使うものに関してはしっかりと仕様を理解しておくとよい。

###イージング（移動するアニメ）についてのGoogleの偉い人の解説
https://developers.google.com/web/fundamentals/design-and-ux/animations/the-basics-of-easing?hl=ja

課題は明日送ります～とのこと


###先生おすすめのキャッチアップできそうなやつ
フロントエンドに関してのアンテナを張るならこのサイト（https://news.ycombinator.com/）
コードグリッドみたいな有料のマガジン
モヒカンっていう情報収集用のslackのチャンネル

2020.12.26
#第3回
console.logはコンソールタブに何かを表示するのに使うよ
ブラウザの検証のコンソールになにか書き込むことでそこで実行することもできるっぽ
(lesson03/img/memo01)
bodyの中で実行したいとこでJS読み込むっぽい

##CDNについて
ざっくり言うと自分のサーバじゃないネットワーク上のサーバのことみたい↓詳しい解説
https://www.kagoya.jp/howto/network/cdn/
フォントアウェサムとかグーグルのフォントとかがいい例
自サーバじゃないところからフォントデータを読み込んで画面上に表示することができるよ

##JSメモ
###変数の使い方について
優先的にconstを使用しましょう
どうしてもconstで実装が難しい場所はletを使いましょう
letは再代入が可能なので、書き換えが容易に行われてしまうため
保守の観点からもリスクがあるため

###varってなに？
ECMAscriptって前身となる言語があって
その名残みたいなもの
古いプログラムをサポートするために残ってるだけなので
基本的には使わないほうがいい

###文(statement)と式(expression)について
https://jsprimer.net/basic/statement-expression/
####式
結果を(評価して）変数に代入することができるもの
const variable = 1 + 1;
console.log(variable);

プログラムのステップにもなりうるので式は文となることもある

####文
評価の結果を変数に代入することができないもの
プログラムの各ステップのこと
式として使用できない文もある
const some = if(){

}
式なんだけど文として実行したい場合は区切りたい文の末尾にセミコロンをつける「；」
JavaScriptの書き方として文末にセミコロンをつけるかどうかは書き方のスタイルによるっぽい
JavaScriptの機能として、セミコロンの自動挿入があるため書かないひとも結構いるっぽい

###コーディングスタイル
各開発現場によって文字列にはシングルクォーテーションをつかうのかダブルクォーテーションを使うのか等がコーディングスタイルというもので定められており
それにそって開発を行う形になります

2021.01.02は休講なので第4回は2021.01.09
